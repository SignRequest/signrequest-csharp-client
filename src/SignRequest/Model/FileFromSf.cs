/* 
 * SignRequest API
 *
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SignRequest.Client.SwaggerDateConverter;

namespace SignRequest.Model
{
    /// <summary>
    /// FileFromSf
    /// </summary>
    [DataContract]
    public partial class FileFromSf :  IEquatable<FileFromSf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileFromSf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileFromSf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileFromSf" /> class.
        /// </summary>
        /// <param name="objectType">objectType (required).</param>
        /// <param name="objectId">objectId (required).</param>
        /// <param name="uid">uid.</param>
        public FileFromSf(string objectType = default(string), string objectId = default(string), string uid = default(string))
        {
            // to ensure "objectType" is required (not null)
            if (objectType == null)
            {
                throw new InvalidDataException("objectType is a required property for FileFromSf and cannot be null");
            }
            else
            {
                this.ObjectType = objectType;
            }
            // to ensure "objectId" is required (not null)
            if (objectId == null)
            {
                throw new InvalidDataException("objectId is a required property for FileFromSf and cannot be null");
            }
            else
            {
                this.ObjectId = objectId;
            }
            this.Uid = uid;
        }
        
        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="object_type", EmitDefaultValue=false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name="object_id", EmitDefaultValue=false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileFromSf {\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileFromSf);
        }

        /// <summary>
        /// Returns true if FileFromSf instances are equal
        /// </summary>
        /// <param name="input">Instance of FileFromSf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileFromSf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ObjectType (string) minLength
            if(this.ObjectType != null && this.ObjectType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ObjectType, length must be greater than 1.", new [] { "ObjectType" });
            }

            // ObjectId (string) minLength
            if(this.ObjectId != null && this.ObjectId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ObjectId, length must be greater than 1.", new [] { "ObjectId" });
            }

            // Uid (string) minLength
            if(this.Uid != null && this.Uid.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Uid, length must be greater than 1.", new [] { "Uid" });
            }

            yield break;
        }
    }

}
