/* 
 * SignRequest API
 *
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SignRequest.Client.SwaggerDateConverter;

namespace SignRequest.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract]
    public partial class Document :  IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// &#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired
        /// </summary>
        /// <value>&#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Co for value: co
            /// </summary>
            [EnumMember(Value = "co")]
            Co = 1,
            
            /// <summary>
            /// Enum Ne for value: ne
            /// </summary>
            [EnumMember(Value = "ne")]
            Ne = 2,
            
            /// <summary>
            /// Enum Se for value: se
            /// </summary>
            [EnumMember(Value = "se")]
            Se = 3,
            
            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 4,
            
            /// <summary>
            /// Enum Si for value: si
            /// </summary>
            [EnumMember(Value = "si")]
            Si = 5,
            
            /// <summary>
            /// Enum Do for value: do
            /// </summary>
            [EnumMember(Value = "do")]
            Do = 6,
            
            /// <summary>
            /// Enum Sd for value: sd
            /// </summary>
            [EnumMember(Value = "sd")]
            Sd = 7,
            
            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 8,
            
            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 9,
            
            /// <summary>
            /// Enum Ec for value: ec
            /// </summary>
            [EnumMember(Value = "ec")]
            Ec = 10,
            
            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 11,
            
            /// <summary>
            /// Enum Xp for value: xp
            /// </summary>
            [EnumMember(Value = "xp")]
            Xp = 12
        }

        /// <summary>
        /// &#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired
        /// </summary>
        /// <value>&#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="team">team.</param>
        /// <param name="user">user.</param>
        /// <param name="name">Defaults to filename, including extension.</param>
        /// <param name="externalId">ID used to reference document in external system.</param>
        /// <param name="frontendId">Shared secret used in conjunction with &lt;a href&#x3D;\&quot;#section/Frontend-API/SignRequest-js-client-(beta)\&quot;&gt;SignRequest-js client&lt;/a&gt; to grant user access to a document that&#39;s not a member of the document&#39;s team.</param>
        /// <param name="fileFromUrl">Publicly accessible URL of document to be downloaded by SignRequest.</param>
        /// <param name="eventsCallbackUrl">URL at which to receive [event callbacks](#section/Events/Events-callback) for this document.</param>
        /// <param name="fileFromContent">Base64 encoded document content.</param>
        /// <param name="fileFromContentName">Filename, including extension. Required when using &#x60;file_from_content&#x60;..</param>
        /// <param name="template">template.</param>
        /// <param name="prefillTags">Prefill signer input data, see [prefill tags](#section/Preparing-a-document/Prefill-tags-templates).</param>
        /// <param name="integrations">integrations.</param>
        /// <param name="fileFromSf">fileFromSf.</param>
        /// <param name="autoDeleteDays">Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted.</param>
        /// <param name="signrequest">signrequest.</param>
        /// <param name="signingLog">signingLog.</param>
        public Document(DocumentTeam team = default(DocumentTeam), User user = default(User), string name = default(string), string externalId = default(string), string frontendId = default(string), string fileFromUrl = default(string), string eventsCallbackUrl = default(string), string fileFromContent = default(string), string fileFromContentName = default(string), string template = default(string), List<InlinePrefillTags> prefillTags = default(List<InlinePrefillTags>), List<InlineIntegrationData> integrations = default(List<InlineIntegrationData>), FileFromSf fileFromSf = default(FileFromSf), int? autoDeleteDays = default(int?), DocumentSignrequest signrequest = default(DocumentSignrequest), DocumentSigningLog signingLog = default(DocumentSigningLog))
        {
            this.Team = team;
            this.User = user;
            this.Name = name;
            this.ExternalId = externalId;
            this.FrontendId = frontendId;
            this.FileFromUrl = fileFromUrl;
            this.EventsCallbackUrl = eventsCallbackUrl;
            this.FileFromContent = fileFromContent;
            this.FileFromContentName = fileFromContentName;
            this.Template = template;
            this.PrefillTags = prefillTags;
            this.Integrations = integrations;
            this.FileFromSf = fileFromSf;
            this.AutoDeleteDays = autoDeleteDays;
            this.Signrequest = signrequest;
            this.SigningLog = signingLog;
        }
        
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; private set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public DocumentTeam Team { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Temporary URL to original file as PDF, expires in five minutes
        /// </summary>
        /// <value>Temporary URL to original file as PDF, expires in five minutes</value>
        [DataMember(Name="file_as_pdf", EmitDefaultValue=false)]
        public string FileAsPdf { get; private set; }

        /// <summary>
        /// Defaults to filename, including extension
        /// </summary>
        /// <value>Defaults to filename, including extension</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// ID used to reference document in external system
        /// </summary>
        /// <value>ID used to reference document in external system</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Shared secret used in conjunction with &lt;a href&#x3D;\&quot;#section/Frontend-API/SignRequest-js-client-(beta)\&quot;&gt;SignRequest-js client&lt;/a&gt; to grant user access to a document that&#39;s not a member of the document&#39;s team
        /// </summary>
        /// <value>Shared secret used in conjunction with &lt;a href&#x3D;\&quot;#section/Frontend-API/SignRequest-js-client-(beta)\&quot;&gt;SignRequest-js client&lt;/a&gt; to grant user access to a document that&#39;s not a member of the document&#39;s team</value>
        [DataMember(Name="frontend_id", EmitDefaultValue=false)]
        public string FrontendId { get; set; }

        /// <summary>
        /// Temporary URL to original file, expires in five minutes
        /// </summary>
        /// <value>Temporary URL to original file, expires in five minutes</value>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; private set; }

        /// <summary>
        /// Publicly accessible URL of document to be downloaded by SignRequest
        /// </summary>
        /// <value>Publicly accessible URL of document to be downloaded by SignRequest</value>
        [DataMember(Name="file_from_url", EmitDefaultValue=false)]
        public string FileFromUrl { get; set; }

        /// <summary>
        /// URL at which to receive [event callbacks](#section/Events/Events-callback) for this document
        /// </summary>
        /// <value>URL at which to receive [event callbacks](#section/Events/Events-callback) for this document</value>
        [DataMember(Name="events_callback_url", EmitDefaultValue=false)]
        public string EventsCallbackUrl { get; set; }

        /// <summary>
        /// Base64 encoded document content
        /// </summary>
        /// <value>Base64 encoded document content</value>
        [DataMember(Name="file_from_content", EmitDefaultValue=false)]
        public string FileFromContent { get; set; }

        /// <summary>
        /// Filename, including extension. Required when using &#x60;file_from_content&#x60;.
        /// </summary>
        /// <value>Filename, including extension. Required when using &#x60;file_from_content&#x60;.</value>
        [DataMember(Name="file_from_content_name", EmitDefaultValue=false)]
        public string FileFromContentName { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// Prefill signer input data, see [prefill tags](#section/Preparing-a-document/Prefill-tags-templates)
        /// </summary>
        /// <value>Prefill signer input data, see [prefill tags](#section/Preparing-a-document/Prefill-tags-templates)</value>
        [DataMember(Name="prefill_tags", EmitDefaultValue=false)]
        public List<InlinePrefillTags> PrefillTags { get; set; }

        /// <summary>
        /// Gets or Sets Integrations
        /// </summary>
        [DataMember(Name="integrations", EmitDefaultValue=false)]
        public List<InlineIntegrationData> Integrations { get; set; }

        /// <summary>
        /// Gets or Sets FileFromSf
        /// </summary>
        [DataMember(Name="file_from_sf", EmitDefaultValue=false)]
        public FileFromSf FileFromSf { get; set; }

        /// <summary>
        /// Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted
        /// </summary>
        /// <value>Number of days after which a finished document (signed/cancelled/declined) will be automatically deleted</value>
        [DataMember(Name="auto_delete_days", EmitDefaultValue=false)]
        public int? AutoDeleteDays { get; set; }

        /// <summary>
        /// Temporary URL to signed document as PDF, expires in five minutes
        /// </summary>
        /// <value>Temporary URL to signed document as PDF, expires in five minutes</value>
        [DataMember(Name="pdf", EmitDefaultValue=false)]
        public string Pdf { get; private set; }


        /// <summary>
        /// Gets or Sets Signrequest
        /// </summary>
        [DataMember(Name="signrequest", EmitDefaultValue=false)]
        public DocumentSignrequest Signrequest { get; set; }

        /// <summary>
        /// Indicates whether document was created using the API
        /// </summary>
        /// <value>Indicates whether document was created using the API</value>
        [DataMember(Name="api_used", EmitDefaultValue=false)]
        public bool? ApiUsed { get; private set; }

        /// <summary>
        /// Gets or Sets SigningLog
        /// </summary>
        [DataMember(Name="signing_log", EmitDefaultValue=false)]
        public DocumentSigningLog SigningLog { get; set; }

        /// <summary>
        /// SHA256 hash of PDF contents
        /// </summary>
        /// <value>SHA256 hash of PDF contents</value>
        [DataMember(Name="security_hash", EmitDefaultValue=false)]
        public string SecurityHash { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<DocumentAttachment> Attachments { get; private set; }

        /// <summary>
        /// Date and time calculated using &#x60;auto_delete_days&#x60; after which a finished document (signed/cancelled/declined) will be automatically deleted
        /// </summary>
        /// <value>Date and time calculated using &#x60;auto_delete_days&#x60; after which a finished document (signed/cancelled/declined) will be automatically deleted</value>
        [DataMember(Name="auto_delete_after", EmitDefaultValue=false)]
        public DateTime? AutoDeleteAfter { get; private set; }

        /// <summary>
        /// Indicates whether document was created as part of a sandbox team
        /// </summary>
        /// <value>Indicates whether document was created as part of a sandbox team</value>
        [DataMember(Name="sandbox", EmitDefaultValue=false)]
        public bool? Sandbox { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  FileAsPdf: ").Append(FileAsPdf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  FrontendId: ").Append(FrontendId).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileFromUrl: ").Append(FileFromUrl).Append("\n");
            sb.Append("  EventsCallbackUrl: ").Append(EventsCallbackUrl).Append("\n");
            sb.Append("  FileFromContent: ").Append(FileFromContent).Append("\n");
            sb.Append("  FileFromContentName: ").Append(FileFromContentName).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  PrefillTags: ").Append(PrefillTags).Append("\n");
            sb.Append("  Integrations: ").Append(Integrations).Append("\n");
            sb.Append("  FileFromSf: ").Append(FileFromSf).Append("\n");
            sb.Append("  AutoDeleteDays: ").Append(AutoDeleteDays).Append("\n");
            sb.Append("  Pdf: ").Append(Pdf).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Signrequest: ").Append(Signrequest).Append("\n");
            sb.Append("  ApiUsed: ").Append(ApiUsed).Append("\n");
            sb.Append("  SigningLog: ").Append(SigningLog).Append("\n");
            sb.Append("  SecurityHash: ").Append(SecurityHash).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AutoDeleteAfter: ").Append(AutoDeleteAfter).Append("\n");
            sb.Append("  Sandbox: ").Append(Sandbox).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.FileAsPdf == input.FileAsPdf ||
                    (this.FileAsPdf != null &&
                    this.FileAsPdf.Equals(input.FileAsPdf))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.FrontendId == input.FrontendId ||
                    (this.FrontendId != null &&
                    this.FrontendId.Equals(input.FrontendId))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.FileFromUrl == input.FileFromUrl ||
                    (this.FileFromUrl != null &&
                    this.FileFromUrl.Equals(input.FileFromUrl))
                ) && 
                (
                    this.EventsCallbackUrl == input.EventsCallbackUrl ||
                    (this.EventsCallbackUrl != null &&
                    this.EventsCallbackUrl.Equals(input.EventsCallbackUrl))
                ) && 
                (
                    this.FileFromContent == input.FileFromContent ||
                    (this.FileFromContent != null &&
                    this.FileFromContent.Equals(input.FileFromContent))
                ) && 
                (
                    this.FileFromContentName == input.FileFromContentName ||
                    (this.FileFromContentName != null &&
                    this.FileFromContentName.Equals(input.FileFromContentName))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.PrefillTags == input.PrefillTags ||
                    this.PrefillTags != null &&
                    this.PrefillTags.SequenceEqual(input.PrefillTags)
                ) && 
                (
                    this.Integrations == input.Integrations ||
                    this.Integrations != null &&
                    this.Integrations.SequenceEqual(input.Integrations)
                ) && 
                (
                    this.FileFromSf == input.FileFromSf ||
                    (this.FileFromSf != null &&
                    this.FileFromSf.Equals(input.FileFromSf))
                ) && 
                (
                    this.AutoDeleteDays == input.AutoDeleteDays ||
                    (this.AutoDeleteDays != null &&
                    this.AutoDeleteDays.Equals(input.AutoDeleteDays))
                ) && 
                (
                    this.Pdf == input.Pdf ||
                    (this.Pdf != null &&
                    this.Pdf.Equals(input.Pdf))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Signrequest == input.Signrequest ||
                    (this.Signrequest != null &&
                    this.Signrequest.Equals(input.Signrequest))
                ) && 
                (
                    this.ApiUsed == input.ApiUsed ||
                    (this.ApiUsed != null &&
                    this.ApiUsed.Equals(input.ApiUsed))
                ) && 
                (
                    this.SigningLog == input.SigningLog ||
                    (this.SigningLog != null &&
                    this.SigningLog.Equals(input.SigningLog))
                ) && 
                (
                    this.SecurityHash == input.SecurityHash ||
                    (this.SecurityHash != null &&
                    this.SecurityHash.Equals(input.SecurityHash))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.AutoDeleteAfter == input.AutoDeleteAfter ||
                    (this.AutoDeleteAfter != null &&
                    this.AutoDeleteAfter.Equals(input.AutoDeleteAfter))
                ) && 
                (
                    this.Sandbox == input.Sandbox ||
                    (this.Sandbox != null &&
                    this.Sandbox.Equals(input.Sandbox))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.FileAsPdf != null)
                    hashCode = hashCode * 59 + this.FileAsPdf.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.FrontendId != null)
                    hashCode = hashCode * 59 + this.FrontendId.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.FileFromUrl != null)
                    hashCode = hashCode * 59 + this.FileFromUrl.GetHashCode();
                if (this.EventsCallbackUrl != null)
                    hashCode = hashCode * 59 + this.EventsCallbackUrl.GetHashCode();
                if (this.FileFromContent != null)
                    hashCode = hashCode * 59 + this.FileFromContent.GetHashCode();
                if (this.FileFromContentName != null)
                    hashCode = hashCode * 59 + this.FileFromContentName.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.PrefillTags != null)
                    hashCode = hashCode * 59 + this.PrefillTags.GetHashCode();
                if (this.Integrations != null)
                    hashCode = hashCode * 59 + this.Integrations.GetHashCode();
                if (this.FileFromSf != null)
                    hashCode = hashCode * 59 + this.FileFromSf.GetHashCode();
                if (this.AutoDeleteDays != null)
                    hashCode = hashCode * 59 + this.AutoDeleteDays.GetHashCode();
                if (this.Pdf != null)
                    hashCode = hashCode * 59 + this.Pdf.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Signrequest != null)
                    hashCode = hashCode * 59 + this.Signrequest.GetHashCode();
                if (this.ApiUsed != null)
                    hashCode = hashCode * 59 + this.ApiUsed.GetHashCode();
                if (this.SigningLog != null)
                    hashCode = hashCode * 59 + this.SigningLog.GetHashCode();
                if (this.SecurityHash != null)
                    hashCode = hashCode * 59 + this.SecurityHash.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.AutoDeleteAfter != null)
                    hashCode = hashCode * 59 + this.AutoDeleteAfter.GetHashCode();
                if (this.Sandbox != null)
                    hashCode = hashCode * 59 + this.Sandbox.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Uuid (string) minLength
            if(this.Uuid != null && this.Uuid.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Uuid, length must be greater than 1.", new [] { "Uuid" });
            }

            // FileAsPdf (string) minLength
            if(this.FileAsPdf != null && this.FileAsPdf.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileAsPdf, length must be greater than 1.", new [] { "FileAsPdf" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // ExternalId (string) maxLength
            if(this.ExternalId != null && this.ExternalId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be less than 255.", new [] { "ExternalId" });
            }

            // FrontendId (string) maxLength
            if(this.FrontendId != null && this.FrontendId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FrontendId, length must be less than 255.", new [] { "FrontendId" });
            }

            // FileFromUrl (string) maxLength
            if(this.FileFromUrl != null && this.FileFromUrl.Length > 2100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileFromUrl, length must be less than 2100.", new [] { "FileFromUrl" });
            }

            // EventsCallbackUrl (string) maxLength
            if(this.EventsCallbackUrl != null && this.EventsCallbackUrl.Length > 2100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventsCallbackUrl, length must be less than 2100.", new [] { "EventsCallbackUrl" });
            }

            // AutoDeleteDays (int?) maximum
            if(this.AutoDeleteDays > (int?)730)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AutoDeleteDays, must be a value less than or equal to 730.", new [] { "AutoDeleteDays" });
            }

            // AutoDeleteDays (int?) minimum
            if(this.AutoDeleteDays < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AutoDeleteDays, must be a value greater than or equal to 1.", new [] { "AutoDeleteDays" });
            }

            // SecurityHash (string) minLength
            if(this.SecurityHash != null && this.SecurityHash.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecurityHash, length must be greater than 1.", new [] { "SecurityHash" });
            }

            yield break;
        }
    }

}
