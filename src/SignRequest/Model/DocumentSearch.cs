/* 
 * SignRequest API
 *
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = SignRequest.Client.SwaggerDateConverter;

namespace SignRequest.Model
{
    /// <summary>
    /// DocumentSearch
    /// </summary>
    [DataContract]
    public partial class DocumentSearch :  IEquatable<DocumentSearch>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSearch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentSearch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSearch" /> class.
        /// </summary>
        /// <param name="status">&#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired.</param>
        /// <param name="who">who (required).</param>
        /// <param name="autocomplete">autocomplete (required).</param>
        /// <param name="fromEmail">fromEmail (required).</param>
        /// <param name="nrExtraDocs">nrExtraDocs (required).</param>
        public DocumentSearch(string status = default(string), string who = default(string), string autocomplete = default(string), string fromEmail = default(string), int? nrExtraDocs = default(int?))
        {
            // to ensure "who" is required (not null)
            if (who == null)
            {
                throw new InvalidDataException("who is a required property for DocumentSearch and cannot be null");
            }
            else
            {
                this.Who = who;
            }
            // to ensure "autocomplete" is required (not null)
            if (autocomplete == null)
            {
                throw new InvalidDataException("autocomplete is a required property for DocumentSearch and cannot be null");
            }
            else
            {
                this.Autocomplete = autocomplete;
            }
            // to ensure "fromEmail" is required (not null)
            if (fromEmail == null)
            {
                throw new InvalidDataException("fromEmail is a required property for DocumentSearch and cannot be null");
            }
            else
            {
                this.FromEmail = fromEmail;
            }
            // to ensure "nrExtraDocs" is required (not null)
            if (nrExtraDocs == null)
            {
                throw new InvalidDataException("nrExtraDocs is a required property for DocumentSearch and cannot be null");
            }
            else
            {
                this.NrExtraDocs = nrExtraDocs;
            }
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// &#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired
        /// </summary>
        /// <value>&#x60;co&#x60;: converting, &#x60;ne&#x60;: new, &#x60;se&#x60;: sent, &#x60;vi&#x60;: viewed, &#x60;si&#x60;: signed, &#x60;do&#x60;: downloaded, &#x60;sd&#x60;: signed and downloaded, &#x60;ca&#x60;: cancelled, &#x60;de&#x60;: declined, &#x60;ec&#x60;: error converting, &#x60;es&#x60;: error sending, &#x60;xp&#x60;: expired</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Who
        /// </summary>
        [DataMember(Name="who", EmitDefaultValue=false)]
        public string Who { get; set; }

        /// <summary>
        /// Defaults to filename
        /// </summary>
        /// <value>Defaults to filename</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets Autocomplete
        /// </summary>
        [DataMember(Name="autocomplete", EmitDefaultValue=false)]
        public string Autocomplete { get; set; }

        /// <summary>
        /// Gets or Sets FromEmail
        /// </summary>
        [DataMember(Name="from_email", EmitDefaultValue=false)]
        public string FromEmail { get; set; }

        /// <summary>
        /// Gets or Sets NrExtraDocs
        /// </summary>
        [DataMember(Name="nr_extra_docs", EmitDefaultValue=false)]
        public int? NrExtraDocs { get; set; }

        /// <summary>
        /// Gets or Sets SignerEmails
        /// </summary>
        [DataMember(Name="signer_emails", EmitDefaultValue=false)]
        public List<string> SignerEmails { get; private set; }

        /// <summary>
        /// Gets or Sets StatusDisplay
        /// </summary>
        [DataMember(Name="status_display", EmitDefaultValue=false)]
        public string StatusDisplay { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedTimestamp
        /// </summary>
        [DataMember(Name="created_timestamp", EmitDefaultValue=false)]
        public int? CreatedTimestamp { get; private set; }

        /// <summary>
        /// Gets or Sets FinishedOnTimestamp
        /// </summary>
        [DataMember(Name="finished_on_timestamp", EmitDefaultValue=false)]
        public int? FinishedOnTimestamp { get; private set; }

        /// <summary>
        /// Gets or Sets ParentDoc
        /// </summary>
        [DataMember(Name="parent_doc", EmitDefaultValue=false)]
        public string ParentDoc { get; private set; }

        /// <summary>
        /// Gets or Sets FinishedOn
        /// </summary>
        [DataMember(Name="finished_on", EmitDefaultValue=false)]
        public DateTime? FinishedOn { get; private set; }

        /// <summary>
        /// Gets or Sets Subdomain
        /// </summary>
        [DataMember(Name="subdomain", EmitDefaultValue=false)]
        public string Subdomain { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentSearch {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Who: ").Append(Who).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Autocomplete: ").Append(Autocomplete).Append("\n");
            sb.Append("  FromEmail: ").Append(FromEmail).Append("\n");
            sb.Append("  NrExtraDocs: ").Append(NrExtraDocs).Append("\n");
            sb.Append("  SignerEmails: ").Append(SignerEmails).Append("\n");
            sb.Append("  StatusDisplay: ").Append(StatusDisplay).Append("\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  FinishedOnTimestamp: ").Append(FinishedOnTimestamp).Append("\n");
            sb.Append("  ParentDoc: ").Append(ParentDoc).Append("\n");
            sb.Append("  FinishedOn: ").Append(FinishedOn).Append("\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentSearch);
        }

        /// <summary>
        /// Returns true if DocumentSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentSearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Who == input.Who ||
                    (this.Who != null &&
                    this.Who.Equals(input.Who))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Autocomplete == input.Autocomplete ||
                    (this.Autocomplete != null &&
                    this.Autocomplete.Equals(input.Autocomplete))
                ) && 
                (
                    this.FromEmail == input.FromEmail ||
                    (this.FromEmail != null &&
                    this.FromEmail.Equals(input.FromEmail))
                ) && 
                (
                    this.NrExtraDocs == input.NrExtraDocs ||
                    (this.NrExtraDocs != null &&
                    this.NrExtraDocs.Equals(input.NrExtraDocs))
                ) && 
                (
                    this.SignerEmails == input.SignerEmails ||
                    this.SignerEmails != null &&
                    this.SignerEmails.SequenceEqual(input.SignerEmails)
                ) && 
                (
                    this.StatusDisplay == input.StatusDisplay ||
                    (this.StatusDisplay != null &&
                    this.StatusDisplay.Equals(input.StatusDisplay))
                ) && 
                (
                    this.CreatedTimestamp == input.CreatedTimestamp ||
                    (this.CreatedTimestamp != null &&
                    this.CreatedTimestamp.Equals(input.CreatedTimestamp))
                ) && 
                (
                    this.FinishedOnTimestamp == input.FinishedOnTimestamp ||
                    (this.FinishedOnTimestamp != null &&
                    this.FinishedOnTimestamp.Equals(input.FinishedOnTimestamp))
                ) && 
                (
                    this.ParentDoc == input.ParentDoc ||
                    (this.ParentDoc != null &&
                    this.ParentDoc.Equals(input.ParentDoc))
                ) && 
                (
                    this.FinishedOn == input.FinishedOn ||
                    (this.FinishedOn != null &&
                    this.FinishedOn.Equals(input.FinishedOn))
                ) && 
                (
                    this.Subdomain == input.Subdomain ||
                    (this.Subdomain != null &&
                    this.Subdomain.Equals(input.Subdomain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Who != null)
                    hashCode = hashCode * 59 + this.Who.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Autocomplete != null)
                    hashCode = hashCode * 59 + this.Autocomplete.GetHashCode();
                if (this.FromEmail != null)
                    hashCode = hashCode * 59 + this.FromEmail.GetHashCode();
                if (this.NrExtraDocs != null)
                    hashCode = hashCode * 59 + this.NrExtraDocs.GetHashCode();
                if (this.SignerEmails != null)
                    hashCode = hashCode * 59 + this.SignerEmails.GetHashCode();
                if (this.StatusDisplay != null)
                    hashCode = hashCode * 59 + this.StatusDisplay.GetHashCode();
                if (this.CreatedTimestamp != null)
                    hashCode = hashCode * 59 + this.CreatedTimestamp.GetHashCode();
                if (this.FinishedOnTimestamp != null)
                    hashCode = hashCode * 59 + this.FinishedOnTimestamp.GetHashCode();
                if (this.ParentDoc != null)
                    hashCode = hashCode * 59 + this.ParentDoc.GetHashCode();
                if (this.FinishedOn != null)
                    hashCode = hashCode * 59 + this.FinishedOn.GetHashCode();
                if (this.Subdomain != null)
                    hashCode = hashCode * 59 + this.Subdomain.GetHashCode();
                return hashCode;
            }
        }
    }

}
