/* 
 * SignRequest API
 *
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SignRequest.Client;
using SignRequest.Api;
using SignRequest.Model;

namespace SignRequest.Test
{
    /// <summary>
    ///  Class for testing ApiTokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApiTokensApiTests
    {
        private ApiTokensApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApiTokensApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApiTokensApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApiTokensApi
            //Assert.IsInstanceOfType(typeof(ApiTokensApi), instance, "instance is a ApiTokensApi");
        }

        
        /// <summary>
        /// Test ApiTokensCreate
        /// </summary>
        [Test]
        public void ApiTokensCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AuthToken data = null;
            //var response = instance.ApiTokensCreate(data);
            //Assert.IsInstanceOf<AuthToken> (response, "response is AuthToken");
        }
        
        /// <summary>
        /// Test ApiTokensDelete
        /// </summary>
        [Test]
        public void ApiTokensDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //instance.ApiTokensDelete(key);
            
        }
        
        /// <summary>
        /// Test ApiTokensList
        /// </summary>
        [Test]
        public void ApiTokensListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.ApiTokensList(page, limit);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test ApiTokensRead
        /// </summary>
        [Test]
        public void ApiTokensReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //var response = instance.ApiTokensRead(key);
            //Assert.IsInstanceOf<AuthToken> (response, "response is AuthToken");
        }
        
    }

}
