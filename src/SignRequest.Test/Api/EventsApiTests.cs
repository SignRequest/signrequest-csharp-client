/* 
 * SignRequest API
 *
 * https://signrequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SignRequest.Client;
using SignRequest.Api;
using SignRequest.Model;

namespace SignRequest.Test
{
    /// <summary>
    ///  Class for testing EventsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventsApiTests
    {
        private EventsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventsApi
            //Assert.IsInstanceOfType(typeof(EventsApi), instance, "instance is a EventsApi");
        }

        
        /// <summary>
        /// Test EventsList
        /// </summary>
        [Test]
        public void EventsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentUuid = null;
            //string documentExternalId = null;
            //string documentSignrequestWho = null;
            //string documentSignrequestFromEmail = null;
            //string documentStatus = null;
            //string documentUserEmail = null;
            //string documentUserFirstName = null;
            //string documentUserLastName = null;
            //string delivered = null;
            //string deliveredOn = null;
            //string timestamp = null;
            //string status = null;
            //string eventType = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.EventsList(documentUuid, documentExternalId, documentSignrequestWho, documentSignrequestFromEmail, documentStatus, documentUserEmail, documentUserFirstName, documentUserLastName, delivered, deliveredOn, timestamp, status, eventType, page, limit);
            //Assert.IsInstanceOf<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test EventsRead
        /// </summary>
        [Test]
        public void EventsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.EventsRead(id);
            //Assert.IsInstanceOf<ModelEvent> (response, "response is ModelEvent");
        }
        
    }

}
