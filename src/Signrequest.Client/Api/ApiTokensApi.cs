/* 
 * SignRequest API
 *
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Signrequest.Client.Client;
using Signrequest.Client.Model;

namespace Signrequest.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiTokensApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an API token
        /// </summary>
        /// <remarks>
        /// You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>AuthToken</returns>
        AuthToken ApiTokensCreate (AuthToken data);

        /// <summary>
        /// Create an API token
        /// </summary>
        /// <remarks>
        /// You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of AuthToken</returns>
        ApiResponse<AuthToken> ApiTokensCreateWithHttpInfo (AuthToken data);
        /// <summary>
        /// Delete an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns></returns>
        void ApiTokensDelete (string key);

        /// <summary>
        /// Delete an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiTokensDeleteWithHttpInfo (string key);
        /// <summary>
        /// Retrieve a list of API tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiTokensList (int? page = null, int? limit = null);

        /// <summary>
        /// Retrieve a list of API tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiTokensListWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Retrieve an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>AuthToken</returns>
        AuthToken ApiTokensRead (string key);

        /// <summary>
        /// Retrieve an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>ApiResponse of AuthToken</returns>
        ApiResponse<AuthToken> ApiTokensReadWithHttpInfo (string key);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an API token
        /// </summary>
        /// <remarks>
        /// You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of AuthToken</returns>
        System.Threading.Tasks.Task<AuthToken> ApiTokensCreateAsync (AuthToken data);

        /// <summary>
        /// Create an API token
        /// </summary>
        /// <remarks>
        /// You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthToken>> ApiTokensCreateAsyncWithHttpInfo (AuthToken data);
        /// <summary>
        /// Delete an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiTokensDeleteAsync (string key);

        /// <summary>
        /// Delete an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokensDeleteAsyncWithHttpInfo (string key);
        /// <summary>
        /// Retrieve a list of API tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiTokensListAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Retrieve a list of API tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiTokensListAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Retrieve an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of AuthToken</returns>
        System.Threading.Tasks.Task<AuthToken> ApiTokensReadAsync (string key);

        /// <summary>
        /// Retrieve an API token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthToken>> ApiTokensReadAsyncWithHttpInfo (string key);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiTokensApi : IApiTokensApi
    {
        private Signrequest.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiTokensApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Signrequest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiTokensApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Signrequest.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Signrequest.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an API token You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>AuthToken</returns>
        public AuthToken ApiTokensCreate (AuthToken data)
        {
             ApiResponse<AuthToken> localVarResponse = ApiTokensCreateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an API token You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of AuthToken</returns>
        public ApiResponse< AuthToken > ApiTokensCreateWithHttpInfo (AuthToken data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ApiTokensApi->ApiTokensCreate");

            var localVarPath = "/api-tokens/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthToken)));
        }

        /// <summary>
        /// Create an API token You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of AuthToken</returns>
        public async System.Threading.Tasks.Task<AuthToken> ApiTokensCreateAsync (AuthToken data)
        {
             ApiResponse<AuthToken> localVarResponse = await ApiTokensCreateAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an API token You can create an API token in the [team api settings page](/#/teams). It is also possible to get or create a token using the REST api with your login credentials.
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthToken>> ApiTokensCreateAsyncWithHttpInfo (AuthToken data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ApiTokensApi->ApiTokensCreate");

            var localVarPath = "/api-tokens/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthToken)));
        }

        /// <summary>
        /// Delete an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns></returns>
        public void ApiTokensDelete (string key)
        {
             ApiTokensDeleteWithHttpInfo(key);
        }

        /// <summary>
        /// Delete an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiTokensDeleteWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ApiTokensApi->ApiTokensDelete");

            var localVarPath = "/api-tokens/{key}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiTokensDeleteAsync (string key)
        {
             await ApiTokensDeleteAsyncWithHttpInfo(key);

        }

        /// <summary>
        /// Delete an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiTokensDeleteAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ApiTokensApi->ApiTokensDelete");

            var localVarPath = "/api-tokens/{key}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve a list of API tokens 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiTokensList (int? page = null, int? limit = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = ApiTokensListWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of API tokens 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > ApiTokensListWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api-tokens/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Retrieve a list of API tokens 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiTokensListAsync (int? page = null, int? limit = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApiTokensListAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of API tokens 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiTokensListAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api-tokens/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Retrieve an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>AuthToken</returns>
        public AuthToken ApiTokensRead (string key)
        {
             ApiResponse<AuthToken> localVarResponse = ApiTokensReadWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>ApiResponse of AuthToken</returns>
        public ApiResponse< AuthToken > ApiTokensReadWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ApiTokensApi->ApiTokensRead");

            var localVarPath = "/api-tokens/{key}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthToken)));
        }

        /// <summary>
        /// Retrieve an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of AuthToken</returns>
        public async System.Threading.Tasks.Task<AuthToken> ApiTokensReadAsync (string key)
        {
             ApiResponse<AuthToken> localVarResponse = await ApiTokensReadAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an API token 
        /// </summary>
        /// <exception cref="Signrequest.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">A unique value identifying this api token.</param>
        /// <returns>Task of ApiResponse (AuthToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthToken>> ApiTokensReadAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling ApiTokensApi->ApiTokensRead");

            var localVarPath = "/api-tokens/{key}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter

            // authentication (Token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiTokensRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthToken)));
        }

    }
}
