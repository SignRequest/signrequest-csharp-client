/* 
 * SignRequest API
 *
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Signrequest.Client.Client.SwaggerDateConverter;

namespace Signrequest.Client.Model
{
    /// <summary>
    /// InlineIntegrationData
    /// </summary>
    [DataContract]
    public partial class InlineIntegrationData :  IEquatable<InlineIntegrationData>, IValidatableObject
    {
        /// <summary>
        /// Defines Integration
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntegrationEnum
        {
            
            /// <summary>
            /// Enum Mfiles for value: mfiles
            /// </summary>
            [EnumMember(Value = "mfiles")]
            Mfiles = 1,
            
            /// <summary>
            /// Enum Salesforce for value: salesforce
            /// </summary>
            [EnumMember(Value = "salesforce")]
            Salesforce = 2,
            
            /// <summary>
            /// Enum Formdesk for value: formdesk
            /// </summary>
            [EnumMember(Value = "formdesk")]
            Formdesk = 3,
            
            /// <summary>
            /// Enum Zapier for value: zapier
            /// </summary>
            [EnumMember(Value = "zapier")]
            Zapier = 4,
            
            /// <summary>
            /// Enum Txhash for value: txhash
            /// </summary>
            [EnumMember(Value = "txhash")]
            Txhash = 5
        }

        /// <summary>
        /// Gets or Sets Integration
        /// </summary>
        [DataMember(Name="integration", EmitDefaultValue=false)]
        public IntegrationEnum? Integration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineIntegrationData" /> class.
        /// </summary>
        /// <param name="Integration">Integration.</param>
        /// <param name="IntegrationData">IntegrationData.</param>
        public InlineIntegrationData(IntegrationEnum? Integration = default(IntegrationEnum?), string IntegrationData = default(string))
        {
            this.Integration = Integration;
            this.IntegrationData = IntegrationData;
        }
        

        /// <summary>
        /// Gets or Sets IntegrationData
        /// </summary>
        [DataMember(Name="integration_data", EmitDefaultValue=false)]
        public string IntegrationData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineIntegrationData {\n");
            sb.Append("  Integration: ").Append(Integration).Append("\n");
            sb.Append("  IntegrationData: ").Append(IntegrationData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineIntegrationData);
        }

        /// <summary>
        /// Returns true if InlineIntegrationData instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineIntegrationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineIntegrationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Integration == input.Integration ||
                    (this.Integration != null &&
                    this.Integration.Equals(input.Integration))
                ) && 
                (
                    this.IntegrationData == input.IntegrationData ||
                    (this.IntegrationData != null &&
                    this.IntegrationData.Equals(input.IntegrationData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Integration != null)
                    hashCode = hashCode * 59 + this.Integration.GetHashCode();
                if (this.IntegrationData != null)
                    hashCode = hashCode * 59 + this.IntegrationData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
